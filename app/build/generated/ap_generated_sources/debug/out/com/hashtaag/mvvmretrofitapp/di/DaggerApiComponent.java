// Generated by Dagger (https://google.github.io/dagger).
package com.hashtaag.mvvmretrofitapp.di;

import com.hashtaag.mvvmretrofitapp.model.CountryServices;
import com.hashtaag.mvvmretrofitapp.model.CountryServices_MembersInjector;
import com.hashtaag.mvvmretrofitapp.viewmodel.ListViewModel;
import com.hashtaag.mvvmretrofitapp.viewmodel.ListViewModel_MembersInjector;
import dagger.internal.Preconditions;

public final class DaggerApiComponent implements ApiComponent {
  private ApiModule apiModule;

  private DaggerApiComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApiComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.apiModule = builder.apiModule;
  }

  @Override
  public void inject(CountryServices services) {
    injectCountryServices(services);
  }

  @Override
  public void injectMVClass(ListViewModel listViewModel) {
    injectListViewModel(listViewModel);
  }

  private CountryServices injectCountryServices(CountryServices instance) {
    CountryServices_MembersInjector.injectApi(
        instance, ApiModule_ProviderApiFactory.proxyProviderApi(apiModule));
    return instance;
  }

  private ListViewModel injectListViewModel(ListViewModel instance) {
    ListViewModel_MembersInjector.injectCountryServices(
        instance, ApiModule_CountryServicesFactory.proxyCountryServices(apiModule));
    return instance;
  }

  public static final class Builder {
    private ApiModule apiModule;

    private Builder() {}

    public ApiComponent build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      return new DaggerApiComponent(this);
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }
  }
}
